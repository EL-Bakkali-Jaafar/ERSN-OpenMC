/*
 * The MIT License
 *
 * Copyright 2015 Jaafar EL Bakkali.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
package ersn.openmc;

import static ersn.openmc.ERSNOpenMC_Main.getJarContainingFolder;
import java.awt.Color;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author Jaafar EL Bakkali
 */
public class ERSNOpenMC_Get_OpenMC extends javax.swing.JFrame {

    String str_cmake = " cmake ",
            str_gfortran = " gfortran ",
            str_git = " git ",
            str_mpich2 = " ",
            str_openmpi = " ",
            str_matplotlib = " ",
            str_vtk = " ",
            str_paraview = " ",
            str_numpy = " ",
            str_scipy = " ",
            str_gedit = " ",
            str_ipython,
            str_mutt = "mutt ",
            PETSC_FLAG = "NOT-USED",
            HD5_FLAG = "NOT-USED",
            PARALLEL_HD5_FLAG = "NOT-USED";
    Boolean parallel_mode = false;
    String bashdir_openmc = "";
    String bashdir_hdf5 = "",
            bashdir_petsc = "",
            str_python_5py = "";

    /**
     * Creates new form get_libraries
     */
    public ERSNOpenMC_Get_OpenMC() {
        initComponents();
        getContentPane().setBackground(new Color(0, 0, 128));
        buttonGroup1.add(_SEQ_MODE);
        buttonGroup1.add(SHARE_MODE);
        buttonGroup1.add(DISTRIB_MODE);
 HD5_FLAG = "NOT-USED";
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        buttonGroup3 = new javax.swing.ButtonGroup();
        buttonGroup4 = new javax.swing.ButtonGroup();
        buttonGroup5 = new javax.swing.ButtonGroup();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        btn_get_prerequisites = new javax.swing.JButton();
        _gfortran_ = new javax.swing.JCheckBox();
        _cmake_ = new javax.swing.JCheckBox();
        _mpich2_ = new javax.swing.JCheckBox();
        jSeparator1 = new javax.swing.JSeparator();
        _openmpi_ = new javax.swing.JCheckBox();
        _git_ = new javax.swing.JCheckBox();
        _eog_ = new javax.swing.JCheckBox();
        _matplotlib_ = new javax.swing.JCheckBox();
        _vtk_ = new javax.swing.JCheckBox();
        jSeparator2 = new javax.swing.JSeparator();
        _paraview_ = new javax.swing.JCheckBox();
        _numpy_ = new javax.swing.JCheckBox();
        _scipy_ = new javax.swing.JCheckBox();
        _ipython_ = new javax.swing.JCheckBox();
        _hdf5_ = new javax.swing.JCheckBox();
        _petsc_ = new javax.swing.JCheckBox();
        _petsc_1 = new javax.swing.JCheckBox();
        _petsc_2 = new javax.swing.JCheckBox();
        btn_close2 = new javax.swing.JButton();
        jCheckBox1 = new javax.swing.JCheckBox();
        jPanel2 = new javax.swing.JPanel();
        btn_get_openmc = new javax.swing.JButton();
        lbl_dir = new javax.swing.JLabel();
        btn_dir = new javax.swing.JButton();
        install_dir = new javax.swing.JTextField();
        jSeparator4 = new javax.swing.JSeparator();
        _SEQ_MODE = new javax.swing.JRadioButton();
        SHARE_MODE = new javax.swing.JRadioButton();
        DISTRIB_MODE = new javax.swing.JRadioButton();
        jCheckBox_hdf5 = new javax.swing.JCheckBox();
        jLabel1 = new javax.swing.JLabel();
        jSeparator6 = new javax.swing.JSeparator();
        btn_close1 = new javax.swing.JButton();
        jSeparator7 = new javax.swing.JSeparator();
        jSeparator8 = new javax.swing.JSeparator();
        jSeparator3 = new javax.swing.JSeparator();

        setTitle("ERSN-OpenMC_get_OpenMC");
        getContentPane().setLayout(new java.awt.GridBagLayout());

        jTabbedPane1.setPreferredSize(new java.awt.Dimension(1100, 326));
        jTabbedPane1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTabbedPane1MouseClicked(evt);
            }
        });

        jPanel1.setBackground(java.awt.SystemColor.activeCaption);
        jPanel1.setMinimumSize(new java.awt.Dimension(1500, 300));
        jPanel1.setPreferredSize(new java.awt.Dimension(1500, 258));
        jPanel1.setLayout(new java.awt.GridBagLayout());

        btn_get_prerequisites.setFont(new java.awt.Font("Ubuntu", 0, 13)); // NOI18N
        btn_get_prerequisites.setForeground(java.awt.Color.black);
        btn_get_prerequisites.setText("Get Prerequisites");
        btn_get_prerequisites.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btn_get_prerequisites.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btn_get_prerequisites.setMaximumSize(new java.awt.Dimension(91, 28));
        btn_get_prerequisites.setMinimumSize(new java.awt.Dimension(91, 28));
        btn_get_prerequisites.setPreferredSize(new java.awt.Dimension(91, 28));
        btn_get_prerequisites.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_get_prerequisitesActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 12;
        gridBagConstraints.ipadx = 50;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(18, 600, 18, 0);
        jPanel1.add(btn_get_prerequisites, gridBagConstraints);

        _gfortran_.setBackground(java.awt.SystemColor.activeCaption);
        _gfortran_.setForeground(java.awt.Color.yellow);
        _gfortran_.setSelected(true);
        _gfortran_.setText("gfortran: the GNU Fortran compile.");
        _gfortran_.setEnabled(false);
        _gfortran_.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                _gfortran_ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.ipadx = 400;
        gridBagConstraints.ipady = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanel1.add(_gfortran_, gridBagConstraints);

        _cmake_.setBackground(java.awt.SystemColor.activeCaption);
        _cmake_.setForeground(java.awt.Color.yellow);
        _cmake_.setSelected(true);
        _cmake_.setText("cmake:  a cross-platform and open-source build system.");
        _cmake_.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.ipadx = 350;
        gridBagConstraints.ipady = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanel1.add(_cmake_, gridBagConstraints);

        _mpich2_.setBackground(java.awt.SystemColor.activeCaption);
        _mpich2_.setForeground(java.awt.Color.yellow);
        _mpich2_.setText("mpich2: a standard for message-passing for distributed-memory.");
        _mpich2_.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                _mpich2_ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.ipadx = 250;
        gridBagConstraints.ipady = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanel1.add(_mpich2_, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.ipadx = 354;
        gridBagConstraints.ipady = -6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 42, 0, 0);
        jPanel1.add(jSeparator1, gridBagConstraints);

        _openmpi_.setBackground(java.awt.SystemColor.activeCaption);
        _openmpi_.setForeground(java.awt.Color.yellow);
        _openmpi_.setText("OpenMP:  an API that supports MP for shared memory.");
        _openmpi_.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                _openmpi_ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.ipadx = 350;
        gridBagConstraints.ipady = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanel1.add(_openmpi_, gridBagConstraints);

        _git_.setBackground(java.awt.SystemColor.activeCaption);
        _git_.setForeground(java.awt.Color.yellow);
        _git_.setSelected(true);
        _git_.setText("git : a distributed revision control system.");
        _git_.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.ipadx = 450;
        gridBagConstraints.ipady = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanel1.add(_git_, gridBagConstraints);

        _eog_.setBackground(java.awt.SystemColor.activeCaption);
        _eog_.setForeground(java.awt.Color.yellow);
        _eog_.setSelected(true);
        _eog_.setText("eog: Eye of Gnome, a graphics viewer program.");
        _eog_.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.ipadx = 350;
        gridBagConstraints.ipady = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanel1.add(_eog_, gridBagConstraints);

        _matplotlib_.setBackground(java.awt.SystemColor.activeCaption);
        _matplotlib_.setForeground(new java.awt.Color(255, 255, 0));
        _matplotlib_.setText("matplotlib : a python 2D plotting library.");
        _matplotlib_.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                _matplotlib_ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.ipadx = 200;
        gridBagConstraints.ipady = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 48, 0, 0);
        jPanel1.add(_matplotlib_, gridBagConstraints);

        _vtk_.setBackground(java.awt.SystemColor.activeCaption);
        _vtk_.setForeground(new java.awt.Color(255, 255, 0));
        _vtk_.setText("VTK : The Visualization Toolkit.");
        _vtk_.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                _vtk_ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.ipadx = 200;
        gridBagConstraints.ipady = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 48, 0, 0);
        jPanel1.add(_vtk_, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.gridwidth = 7;
        gridBagConstraints.ipadx = 1380;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 0, 0, 4);
        jPanel1.add(jSeparator2, gridBagConstraints);

        _paraview_.setBackground(java.awt.SystemColor.activeCaption);
        _paraview_.setForeground(new java.awt.Color(255, 255, 0));
        _paraview_.setText("ParaView : an open-source data analysis and visualization application.");
        _paraview_.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                _paraview_ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 9;
        gridBagConstraints.ipadx = 200;
        gridBagConstraints.ipady = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 48, 0, 0);
        jPanel1.add(_paraview_, gridBagConstraints);

        _numpy_.setBackground(java.awt.SystemColor.activeCaption);
        _numpy_.setForeground(new java.awt.Color(255, 255, 0));
        _numpy_.setText("NumPy : the fundamental package for scientific computing with Python.");
        _numpy_.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                _numpy_ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.ipadx = 250;
        gridBagConstraints.ipady = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 48, 0, 0);
        jPanel1.add(_numpy_, gridBagConstraints);

        _scipy_.setBackground(java.awt.SystemColor.activeCaption);
        _scipy_.setForeground(new java.awt.Color(255, 255, 0));
        _scipy_.setText("SciPy: a package of tools for science and engineering for Python.");
        _scipy_.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                _scipy_ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.ipadx = 200;
        gridBagConstraints.ipady = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 48, 0, 0);
        jPanel1.add(_scipy_, gridBagConstraints);

        _ipython_.setBackground(java.awt.SystemColor.activeCaption);
        _ipython_.setForeground(new java.awt.Color(255, 255, 0));
        _ipython_.setText("IPython: interactive computing in Python.");
        _ipython_.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                _ipython_ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.ipadx = 200;
        gridBagConstraints.ipady = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 48, 0, 0);
        jPanel1.add(_ipython_, gridBagConstraints);

        _hdf5_.setBackground(java.awt.SystemColor.activeCaption);
        _hdf5_.setForeground(java.awt.Color.yellow);
        _hdf5_.setText("hdf5: a file format for storing and managing data.");
        _hdf5_.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                _hdf5_ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.ipadx = 350;
        gridBagConstraints.ipady = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanel1.add(_hdf5_, gridBagConstraints);

        _petsc_.setBackground(java.awt.SystemColor.activeCaption);
        _petsc_.setForeground(new java.awt.Color(255, 255, 0));
        _petsc_.setText("PetSc: a suite of data structures and routines for scientific apps.");
        _petsc_.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                _petsc_ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.ipadx = 200;
        gridBagConstraints.ipady = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 48, 0, 0);
        jPanel1.add(_petsc_, gridBagConstraints);

        _petsc_1.setBackground(java.awt.SystemColor.activeCaption);
        _petsc_1.setForeground(new java.awt.Color(255, 255, 0));
        _petsc_1.setText("hpy5: a Pythonic interface to the HDF5 binary data format.");
        _petsc_1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                _petsc_1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.ipadx = 200;
        gridBagConstraints.ipady = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 48, 0, 0);
        jPanel1.add(_petsc_1, gridBagConstraints);

        _petsc_2.setBackground(java.awt.SystemColor.activeCaption);
        _petsc_2.setForeground(java.awt.Color.yellow);
        _petsc_2.setSelected(true);
        _petsc_2.setText("gedit : Text Editor.");
        _petsc_2.setEnabled(false);
        _petsc_2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                _petsc_2ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.ipadx = 450;
        gridBagConstraints.ipady = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanel1.add(_petsc_2, gridBagConstraints);

        btn_close2.setFont(new java.awt.Font("Ubuntu", 0, 13)); // NOI18N
        btn_close2.setForeground(java.awt.Color.black);
        btn_close2.setText("close");
        btn_close2.setMaximumSize(new java.awt.Dimension(100, 28));
        btn_close2.setMinimumSize(new java.awt.Dimension(80, 30));
        btn_close2.setPreferredSize(new java.awt.Dimension(165, 28));
        btn_close2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_close2ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 12;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.insets = new java.awt.Insets(2, 1, 0, 0);
        jPanel1.add(btn_close2, gridBagConstraints);

        jCheckBox1.setBackground(java.awt.SystemColor.activeCaption);
        jCheckBox1.setForeground(java.awt.Color.yellow);
        jCheckBox1.setSelected(true);
        jCheckBox1.setText("mutt: email sender");
        jCheckBox1.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.ipadx = 450;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanel1.add(jCheckBox1, gridBagConstraints);

        jTabbedPane1.addTab("Prerequisites", jPanel1);

        jPanel2.setBackground(java.awt.SystemColor.activeCaption);
        jPanel2.setPreferredSize(new java.awt.Dimension(1200, 290));

        btn_get_openmc.setForeground(java.awt.Color.black);
        btn_get_openmc.setText("Get OpenMC");
        btn_get_openmc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_get_openmcActionPerformed(evt);
            }
        });

        lbl_dir.setBackground(java.awt.SystemColor.activeCaption);
        lbl_dir.setForeground(java.awt.Color.yellow);
        lbl_dir.setText("Choose your install dir");

        btn_dir.setText("...");
        btn_dir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_dirActionPerformed(evt);
            }
        });

        _SEQ_MODE.setBackground(java.awt.SystemColor.activeCaption);
        _SEQ_MODE.setForeground(java.awt.Color.yellow);
        _SEQ_MODE.setText("Sequential mode");
        _SEQ_MODE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                _SEQ_MODEActionPerformed(evt);
            }
        });

        SHARE_MODE.setBackground(java.awt.SystemColor.activeCaption);
        SHARE_MODE.setForeground(java.awt.Color.yellow);
        SHARE_MODE.setText("Shared memory  OMP mode");
        SHARE_MODE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SHARE_MODEActionPerformed(evt);
            }
        });

        DISTRIB_MODE.setBackground(java.awt.SystemColor.activeCaption);
        DISTRIB_MODE.setForeground(java.awt.Color.yellow);
        DISTRIB_MODE.setText("Distributed memory MPI mode");
        DISTRIB_MODE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DISTRIB_MODEActionPerformed(evt);
            }
        });

        jCheckBox_hdf5.setBackground(java.awt.SystemColor.activeCaption);
        jCheckBox_hdf5.setForeground(java.awt.Color.yellow);
        jCheckBox_hdf5.setText("check if compling with HDF5");
        jCheckBox_hdf5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jCheckBox_hdf5MouseClicked(evt);
            }
        });
        jCheckBox_hdf5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox_hdf5ActionPerformed(evt);
            }
        });

        jLabel1.setBackground(java.awt.SystemColor.info);
        jLabel1.setForeground(java.awt.Color.yellow);
        jLabel1.setText("The OpenMC Monte Carlo code will be compiled with one of the following mode (at least check one option):");

        btn_close1.setBackground(new java.awt.Color(215, 208, 208));
        btn_close1.setForeground(java.awt.Color.black);
        btn_close1.setText("close");
        btn_close1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_close1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(lbl_dir)
                                .addGap(31, 31, 31)
                                .addComponent(install_dir, javax.swing.GroupLayout.PREFERRED_SIZE, 701, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(30, 30, 30)
                                .addComponent(btn_dir, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(_SEQ_MODE)
                            .addComponent(jLabel1)
                            .addComponent(DISTRIB_MODE)
                            .addComponent(SHARE_MODE)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(403, 403, 403)
                        .addComponent(btn_get_openmc, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(370, 370, 370)
                        .addComponent(btn_close1, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(jCheckBox_hdf5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 1192, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jSeparator8, javax.swing.GroupLayout.PREFERRED_SIZE, 1089, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jSeparator7, javax.swing.GroupLayout.PREFERRED_SIZE, 1086, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jSeparator6, javax.swing.GroupLayout.PREFERRED_SIZE, 1086, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(install_dir, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btn_dir)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addComponent(lbl_dir)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator6, javax.swing.GroupLayout.PREFERRED_SIZE, 6, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(_SEQ_MODE)
                .addGap(4, 4, 4)
                .addComponent(SHARE_MODE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(DISTRIB_MODE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator7, javax.swing.GroupLayout.PREFERRED_SIZE, 6, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBox_hdf5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 0, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator8, javax.swing.GroupLayout.PREFERRED_SIZE, 6, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(24, 24, 24)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_get_openmc)
                    .addComponent(btn_close1))
                .addGap(48, 48, 48))
        );

        jTabbedPane1.addTab("OpenMC", jPanel2);

        getContentPane().add(jTabbedPane1, new java.awt.GridBagConstraints());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 0, 0, 0);
        getContentPane().add(jSeparator3, gridBagConstraints);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btn_get_openmcActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_get_openmcActionPerformed
        System.out.print("ERSN-OPENMC/CONSOLE:-------INSTALLING  OPENMC MONTE CARLO CODE.");
        try {            Process pb = Runtime.getRuntime().exec("xterm  -j  -sb -sl 2000 -title ERSN-OpenMC_Console -e " + bashdir_openmc + " " + install_dir.getText() + " " + HD5_FLAG + " " + PETSC_FLAG);
         pb.waitFor();
            JOptionPane.showMessageDialog(this, "The OpenMC Monte Carlo code has been installed");

        } catch (IOException | InterruptedException ex) {
            System.out.print(ex);
        }
        
        save_openmcdir_file(install_dir.getText());
        save_scriptsdir_file(install_dir.getText());
        save_cross_sectiondir_file(install_dir.getText());

    }//GEN-LAST:event_btn_get_openmcActionPerformed
    public void get_prerequisites() {
        try {
            bashdir_hdf5 = getJarContainingFolder(ERSNOpenMC_Main.class) + "/scripts/get_hdf5.sh";
            if (PARALLEL_HD5_FLAG.equals("USED")) {
                bashdir_hdf5 = getJarContainingFolder(ERSNOpenMC_Main.class) + "/scripts/get_hdf5_parallel.sh";
                System.out.print("ERSN-OPENMC/CONSOLE:-------INSTALLING HDF5 LIBRARY IN PARALLEL MODE.");

            }
            bashdir_petsc = getJarContainingFolder(ERSNOpenMC_Main.class) + "/scripts/get_petsc.sh";

        } catch (Exception ex) {
            System.out.print(ex);
        }

        try {

            Process pb = Runtime.getRuntime().exec("xterm  -title ERSN-OpenMC_Console -e sudo apt-get install " + str_cmake + str_gfortran + str_git + str_mpich2 + str_openmpi + str_matplotlib + str_vtk + str_paraview + str_scipy + str_numpy + str_python_5py + str_gedit);
            pb.waitFor();
            JOptionPane.showMessageDialog(this, "The following packages : " + str_cmake + str_gfortran + str_git + str_mpich2 + str_openmpi + str_mutt + str_matplotlib + str_vtk + str_paraview + str_scipy + str_numpy + str_python_5py + " have been installed successfully  ! ");

            if (_hdf5_.isSelected()) {
                File f = new File("/opt/hdf5");
                if (f.exists() && f.isDirectory()) {
                    System.out.println(" The HDF5 package is already installed in your OS");
                } else {
                    Process pb2 = Runtime.getRuntime().exec("xterm -title ERSN-OpenMC_Console -e  " + bashdir_hdf5);
                    pb2.waitFor();
                    JOptionPane.showMessageDialog(this, "The HDF5 package packages has been  installed successfully ");

                }
            }

            if (_petsc_.isSelected()) {
                File f = new File("/opt/petsc-3.4.4");
                if (f.exists() && f.isDirectory()) {
                    System.out.println(" The PetSc package is already installed in your OS");
                } else {
                    Process pb3 = Runtime.getRuntime().exec("xterm  -title ERSN-OpenMC_Console -e  " + bashdir_petsc);
                    pb3.waitFor();
                    JOptionPane.showMessageDialog(this, "The PETSC package has been  installed successfully");

                }
            }

        } catch (IOException | InterruptedException ex) {
            System.out.print(ex);
        }
    }
public void get_ERSMOpenMC_Config(String openmc_path,String openmc_target, String ersnopenmc_config_file)
{
 try {
            FileWriter lu = new FileWriter(getJarContainingFolder(ERSNOpenMC_Main.class) + ersnopenmc_config_file);// Créer un objet java.io.FileWriter avec comme argument le mon du fichier dans lequel enregsitrer
            try (BufferedWriter fluxS = new BufferedWriter(lu) // Mettre le flux en tampon (en cache)
            ) {
                fluxS.write(openmc_path + openmc_target); //Balancer dans le flux le contenu de la zone de texte
                fluxS.close(); // Fermer le flux (c’est toujours mieux de le fermer explicitement)
            } //Balancer dans le flux le contenu de la zone de texte
        } catch (Exception er) {
        }
}
    public void save_openmcdir_file(String openmc_path) {
get_ERSMOpenMC_Config(openmc_path, "/openmc/bin/openmc",  "/config/openmc.dir");
    
    }

    public void save_scriptsdir_file(String openmc_path) {
get_ERSMOpenMC_Config(openmc_path, "/openmc/scripts",   "/config/scripts.dir");
    }

    public void save_cross_sectiondir_file(String openmc_path) {
get_ERSMOpenMC_Config(openmc_path,"/openmc/data/nndc/cross_sections.xml",   "/config/cross_sections.dir");
    }

    private void btn_get_prerequisitesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_get_prerequisitesActionPerformed
        // Get ALL Prerequisites packages selected by the user.
        get_prerequisites();


    }//GEN-LAST:event_btn_get_prerequisitesActionPerformed

    private void btn_dirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_dirActionPerformed

        // Open an existing OpenMC Project
        JFileChooser fc = new JFileChooser();
        fc.setDialogTitle("Open an existing OpenMC project");
        fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int returnVal = fc.showOpenDialog(this);
        if (returnVal == javax.swing.JFileChooser.APPROVE_OPTION) {
            java.io.File file = fc.getSelectedFile();
            install_dir.setText(file.toString());
            ERSNOpenMC_Singleton singleton = ERSNOpenMC_Singleton.getInstance();
            singleton.setOpenMCPath(install_dir.getText());
            save_openmcdir_file(file.toString());


    }//GEN-LAST:event_btn_dirActionPerformed
    }
    private void _mpich2_ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event__mpich2_ActionPerformed

        if (_mpich2_.isSelected() == true) {
            str_mpich2 = " mpich2 libmpich2-dev ";
            PARALLEL_HD5_FLAG = "USED";

            parallel_mode = true;

        } else {
            str_mpich2 = " ";
            parallel_mode = false;
        }
    }//GEN-LAST:event__mpich2_ActionPerformed

    private void _openmpi_ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event__openmpi_ActionPerformed

        if (_openmpi_.isSelected() == true) {
            str_openmpi = " libopenmpi-dev openmpi-bin libhdf5-openmpi-dev ";
            parallel_mode = true;
            PARALLEL_HD5_FLAG = "USED";

        } else {
            str_openmpi = "  ";
            parallel_mode = false;
        }

    }//GEN-LAST:event__openmpi_ActionPerformed

    private void _matplotlib_ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event__matplotlib_ActionPerformed

        if (_matplotlib_.isSelected() == true) {
            str_matplotlib = " python-matplotlib ";
        } else {
            str_matplotlib = " ";
        }


    }//GEN-LAST:event__matplotlib_ActionPerformed

    private void _vtk_ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event__vtk_ActionPerformed
        str_vtk = " python-vtk ";

        if (_vtk_.isSelected() == true) {
            str_vtk = " python-vtk ";
        } else {
            str_vtk = " ";

        }
    }//GEN-LAST:event__vtk_ActionPerformed

    private void _paraview_ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event__paraview_ActionPerformed

        if (_paraview_.isSelected() == true) {
            str_paraview = " paraview ";
        } else {
            str_paraview = "  ";

        }
    }//GEN-LAST:event__paraview_ActionPerformed

    private void _numpy_ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event__numpy_ActionPerformed
        if (_numpy_.isSelected() == true) {
            str_numpy = " python-numpy ";
        } else {
            str_numpy = " ";
        }
    }//GEN-LAST:event__numpy_ActionPerformed

    private void _scipy_ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event__scipy_ActionPerformed
        if (_scipy_.isSelected() == true) {
            str_scipy = " python-scipy ";
        } else {
            str_scipy = "  ";
        }
    }//GEN-LAST:event__scipy_ActionPerformed

    private void _ipython_ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event__ipython_ActionPerformed
        if (_ipython_.isSelected() == true) {
            str_ipython = " ipython ";
        } else {
str_ipython="  " ;    }//GEN-LAST:event__ipython_ActionPerformed
    }
    private void _petsc_ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event__petsc_ActionPerformed

        if (_petsc_.isSelected() == true) {
            PETSC_FLAG = "USED";
        } else {
            PETSC_FLAG = "NOT-USED";
        }

    }//GEN-LAST:event__petsc_ActionPerformed

    private void _hdf5_ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event__hdf5_ActionPerformed

        if (_hdf5_.isSelected() == true) {
            HD5_FLAG = "USED";
            if (parallel_mode == true) {
            }
        } else {
            HD5_FLAG = "NOT-USED";
            parallel_mode = false;
        }

    }//GEN-LAST:event__hdf5_ActionPerformed

    private void _gfortran_ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event__gfortran_ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event__gfortran_ActionPerformed

    private void _SEQ_MODEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event__SEQ_MODEActionPerformed
        try {
            bashdir_openmc = getJarContainingFolder(ERSNOpenMC_Main.class) + "/scripts/get_openmc.sh";  //load bash file for sequentiel application.
        } catch (Exception ex) {
            System.out.print(ex);
        }

    }//GEN-LAST:event__SEQ_MODEActionPerformed

    private void SHARE_MODEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SHARE_MODEActionPerformed

        try {

            bashdir_openmc = getJarContainingFolder(ERSNOpenMC_Main.class) + "/scripts/get_openmc-with-openmpi.sh"; // load bash file for shared memory application.

        } catch (Exception ex) {
            System.out.print(ex);
        }
    }//GEN-LAST:event_SHARE_MODEActionPerformed

    private void DISTRIB_MODEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DISTRIB_MODEActionPerformed
        try {

            bashdir_openmc = getJarContainingFolder(ERSNOpenMC_Main.class) + "/scripts/get_openmc-with-mpich2.sh";  // load bash file for distributed memory application.

        } catch (Exception ex) {
            System.out.print(ex);
        }

    }//GEN-LAST:event_DISTRIB_MODEActionPerformed

    private void _petsc_1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event__petsc_1ActionPerformed
        str_python_5py = " python-h5py ";
    }//GEN-LAST:event__petsc_1ActionPerformed

    private void _petsc_2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event__petsc_2ActionPerformed
        str_gedit = " gedit ";

    }//GEN-LAST:event__petsc_2ActionPerformed

    private void jCheckBox_hdf5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox_hdf5ActionPerformed

        if (jCheckBox_hdf5.isSelected() == true) {
            HD5_FLAG = "USED";
        }
        
        
        if (jCheckBox_hdf5.isSelected() == false) {
            HD5_FLAG = "NOT-USED";
        }
        System.out.print("ERSN-OPENMC/CONSOLE:-------IHD5_FLAG: " + HD5_FLAG);


    }//GEN-LAST:event_jCheckBox_hdf5ActionPerformed

    private void jTabbedPane1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTabbedPane1MouseClicked
        System.out.print("ERSN-OPENMC/CONSOLE:-------IHD5_FLAG: " + HD5_FLAG);

    }//GEN-LAST:event_jTabbedPane1MouseClicked

    private void jCheckBox_hdf5MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jCheckBox_hdf5MouseClicked
        HD5_FLAG = "USED";
    }//GEN-LAST:event_jCheckBox_hdf5MouseClicked

    private void btn_close1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_close1ActionPerformed
         this.show(false);
    }//GEN-LAST:event_btn_close1ActionPerformed

    private void btn_close2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_close2ActionPerformed
        this.show(false);
    }//GEN-LAST:event_btn_close2ActionPerformed
 
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ERSNOpenMC_Get_OpenMC.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new ERSNOpenMC_Get_OpenMC().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton DISTRIB_MODE;
    private javax.swing.JRadioButton SHARE_MODE;
    private javax.swing.JRadioButton _SEQ_MODE;
    private javax.swing.JCheckBox _cmake_;
    private javax.swing.JCheckBox _eog_;
    private javax.swing.JCheckBox _gfortran_;
    private javax.swing.JCheckBox _git_;
    private javax.swing.JCheckBox _hdf5_;
    private javax.swing.JCheckBox _ipython_;
    private javax.swing.JCheckBox _matplotlib_;
    private javax.swing.JCheckBox _mpich2_;
    private javax.swing.JCheckBox _numpy_;
    private javax.swing.JCheckBox _openmpi_;
    private javax.swing.JCheckBox _paraview_;
    private javax.swing.JCheckBox _petsc_;
    private javax.swing.JCheckBox _petsc_1;
    private javax.swing.JCheckBox _petsc_2;
    private javax.swing.JCheckBox _scipy_;
    private javax.swing.JCheckBox _vtk_;
    private javax.swing.JButton btn_close1;
    private javax.swing.JButton btn_close2;
    private javax.swing.JButton btn_dir;
    private javax.swing.JButton btn_get_openmc;
    private javax.swing.JButton btn_get_prerequisites;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.ButtonGroup buttonGroup3;
    private javax.swing.ButtonGroup buttonGroup4;
    private javax.swing.ButtonGroup buttonGroup5;
    private javax.swing.JTextField install_dir;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JCheckBox jCheckBox_hdf5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JSeparator jSeparator6;
    private javax.swing.JSeparator jSeparator7;
    private javax.swing.JSeparator jSeparator8;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JLabel lbl_dir;
    // End of variables declaration//GEN-END:variables
}
